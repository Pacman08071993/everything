//lifeCycle - это определённые этапы которые проходит React-Component в процессе его определения. Жизненый цикл доступен только для тех компонентов которые наследуются от React.Component.

// Жизненый цикл - представляет из себя функцию которую мы можем определить, и в них мы можем получить доступ к определённым этапам станоления React-компонента



//Базовые жизненные циклы(функции) которые свойственны компоненту в процессе его инициализации :

// 1) constructor() - вызывается при создании React-компонента(относиться к API-JS)

// 2) componentWillMount(){} - вызывается тогда, когда произошла инициализация React-компонента,и React-компонент готов к тому чтобы он был зарендерин(Устарел!!!!!)

//3) render(){} - вызывается тогда, когда произошла инициализация React-компонента, он формирует конечный JSX который в конечном итоге будет представлен в виде HTML.(будет вызываться при изменении стейта,пропсов)  

//4) componentDidMount(){} - вызывается тогда, как только проходит метод render(), сообщает о том что весь HTML-реакта готов и теперь мы можем его преобразовывать(делаем в нем все обращения к бэкэнду)

//5) componentWillReceiveProps(nextProps){} - предназначен для того чтобы локализировать локальный state(если он есть) с входящими свойствами (Устарел!!!!!!)

//6) shouldComponentUpdate(nextProps,nextState){}- в нем мы можем оптимизировать наше приложение(единственный метод который должен что-то вернуть либо "true" либо "false"). Если мы возвращаем true - это значит , что компонент должен измениться и мы должны его перерисовать. Если мы сделаем проверку и вернем false - это будет означать , что данный компонент нам не нужно перерисовывать, и таким образом мы уменьшаем большие затраты на перерисовку компонента.

//7) componentWillUpdate(nextProps,nextState){} - (по сути идентичный метод c "componentWillReceiveProps(){}").Мы получаем параметры которые приходят к нам в компонент, но здесь мы уже знаем что компонент будет изменен(готовимся к его изменению). Вызывается после shouldComponentUpdate. В нем мы можем локализировать локальный state(если он есть) 

//8) componentDidUpdate(){} - срабатывает после того как компонент изменился и мы можем дальше с ним работать 

//9) componentWillUnmount(){} - вызывается тогда когда идёт разрушение нашего компонента и он удаляется из DOM - дерева. В этом цикле мы можем удалять различные таймеры удалять подписки и делать вещи которые позволяют очистить память при удалении элемента

// 10) static getDerivedStateFromProps(nextProps, prevState){} - для того чтобы делать преобразования в state на нужно вернуть новый объект который будет являться результирующим state для нашего компонента.Используется для того чтобы синхронизировать локальный state c входящими параметрами

// 11) getSnapshotBeforeUpdate(){} - срабатывает после render(), но до componentDidUpdate()(до того как обновится), позволяет получить не измененное дом-дерево до обновления. К примеру мы можем сохранить позицию скролла.

