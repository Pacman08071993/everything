//Function Declaration

function имя(параметры) {
  ...тело...
}

showMessage(); // вызов функции
showMessage(); // вызов функции

// 1) Локальные переменные - объявленные внутри функции, видны только внутри функции
// 2) У функции есть доступ к внешним переменным и она может менять их значения

// ПАРАМЕТРЫ :

  // 1) В параметры функции можно передать любую информацию она будет скопированна в локальные переменные
  // 2) Если параметр  не передан то значение будет undefined



//Function Expression 

const sayHi = function() {
  alert('hi'); // - function expression             
}

function sayHi() {
  alert( "Привет" );
}

alert( sayHi ); // выведет код функции

const func = sayHi // Скопирует код функции в переменную

func();


//Функции – это значения. Они могут быть присвоены, скопированы или объявлены в другом месте кода.

//Если функция объявлена как отдельная инструкция в основном потоке кода, то это Function Declaration.

//Если функция была создана как часть выражения, то считается, что эта функция объявлена при помощи Function Expression.

//Function Declaration обрабатываются перед выполнением блока кода. Они видны во всём блоке.

//Функции, объявленные при помощи Function Expression, создаются, только когда поток выполнения достигает их.



//Function - стрелка 

let func = (arg1, arg2, ...argN) => expression

// создаёт функцию func с аргументами arg1..argN и вычисляет expression с правой стороны с их использованием, возвращая результат.
// Пример :


let sum = (a, b) => a + b;

/* Более короткая форма для:

let sum = function(a, b) {
  return a + b;
};
*/

alert( sum(1, 2) ); // 3

// Если у нас только один аргумент, то круглые скобки вокруг параметров можно опустить
// Если нет аргументов, указываются пустые круглые скобки
// Если нет аргументов, указываются пустые круглые скобки


// Многострочная стрелочная функция :

let sum = (a, b) => {  // фигурная скобка, открывающая тело многострочной функции
  let result = a + b;
  return result; // при фигурных скобках для возврата значения нужно явно вызвать return
};

alert( sum(1, 2) ); // 3